name: Playwright Healthcare Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - uat
          - prod
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - api
          - e2e
          - security
          - accessibility
          - performance

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_VERSION: '1.40.0'

jobs:
  # Lint and type check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check Prettier formatting
        run: npm run format:check

  # Install and cache Playwright browsers
  install-browsers:
    name: Install Playwright Browsers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright browsers (if not cached)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, install-browsers]
    strategy:
      matrix:
        environment: [qa, uat]
    env:
      TEST_ENV: ${{ matrix.environment }}
      CI: true
      HEADLESS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Setup environment variables
        run: |
          echo "BASE_URL=${{ secrets[format('{0}_BASE_URL', matrix.environment)] }}" >> $GITHUB_ENV
          echo "API_BASE_URL=${{ secrets[format('{0}_API_BASE_URL', matrix.environment)] }}" >> $GITHUB_ENV
          echo "OAUTH2_CLIENT_ID=${{ secrets[format('{0}_OAUTH2_CLIENT_ID', matrix.environment)] }}" >> $GITHUB_ENV
          echo "OAUTH2_CLIENT_SECRET=${{ secrets[format('{0}_OAUTH2_CLIENT_SECRET', matrix.environment)] }}" >> $GITHUB_ENV

      - name: Run API tests
        run: npm run test:api
        continue-on-error: true

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results-${{ matrix.environment }}
          path: |
            test-results/
            allure-results/
          retention-days: 7

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, install-browsers]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        environment: [qa]
    env:
      TEST_ENV: ${{ matrix.environment }}
      CI: true
      HEADLESS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Setup environment variables
        run: |
          echo "BASE_URL=${{ secrets[format('{0}_BASE_URL', matrix.environment)] }}" >> $GITHUB_ENV
          echo "API_BASE_URL=${{ secrets[format('{0}_API_BASE_URL', matrix.environment)] }}" >> $GITHUB_ENV
          echo "MEMBER_USERNAME=${{ secrets[format('{0}_MEMBER_USERNAME', matrix.environment)] }}" >> $GITHUB_ENV
          echo "MEMBER_PASSWORD=${{ secrets[format('{0}_MEMBER_PASSWORD', matrix.environment)] }}" >> $GITHUB_ENV
          echo "EMPLOYEE_USERNAME=${{ secrets[format('{0}_EMPLOYEE_USERNAME', matrix.environment)] }}" >> $GITHUB_ENV
          echo "EMPLOYEE_PASSWORD=${{ secrets[format('{0}_EMPLOYEE_PASSWORD', matrix.environment)] }}" >> $GITHUB_ENV

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        continue-on-error: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            test-results/
            allure-results/
          retention-days: 7

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, install-browsers]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security')
    env:
      TEST_ENV: qa
      CI: true
      HEADLESS: true
      ENABLE_SECURITY_TESTS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Run security tests
        run: npx playwright test --project=security
        continue-on-error: true

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            test-results/
            allure-results/
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, install-browsers]
    env:
      TEST_ENV: qa
      CI: true
      HEADLESS: true
      ENABLE_ACCESSIBILITY_TESTS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Run accessibility tests
        run: npx playwright test --project=accessibility
        continue-on-error: true

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            test-results/
            allure-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, install-browsers]
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    env:
      TEST_ENV: qa
      CI: true
      HEADLESS: true
      ENABLE_PERFORMANCE_TESTS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Run performance tests
        run: npx playwright test --project=performance
        continue-on-error: true

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            allure-results/
          retention-days: 30

  # Generate and publish reports
  generate-reports:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: [api-tests, e2e-tests, security-tests, accessibility-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Merge Allure results
        run: |
          mkdir -p allure-results
          if [ -d ./artifacts ]; then
            find ./artifacts -name "allure-results" -type d -exec cp -r {}/* allure-results/ \;
          else
            echo "No artifacts directory found, skipping merge."
          fi

      - name: Generate Allure report
        run: npm run report:generate
        continue-on-error: true

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: test-reports

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '7 days'
          skip-recent: 5